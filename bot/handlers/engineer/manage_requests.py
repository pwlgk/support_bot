# bot/handlers/engineer/manage_requests.py
from html import escape
import logging
import math
from aiogram import Router, types, F, Bot # –î–æ–±–∞–≤–ª—è–µ–º Bot –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.exceptions import TelegramBadRequest 
# –§–∏–ª—å—Ç—Ä —Ä–æ–ª–µ–π –∏ –º–æ–¥–µ–ª—å —Ä–æ–ª–∏
from bot.filters.role import RoleFilter
from bot.handlers.admin.admin_panel import ADMIN_HISTORY_PAGE_SIZE
from db.models import RequestStatus, UserRole
# –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from bot.keyboards.reply import (VIEW_NEW_REQUESTS_BTN_TEXT,
                                 MY_ASSIGNED_REQUESTS_BTN_TEXT, HISTORY_BTN_TEXT) # –û–±–Ω–æ–≤–ª–µ–Ω–æ
# --- –û–ë–ù–û–í–ò–¢–¨ –ò–ú–ü–û–†–¢–´ CRUD ---
from db.crud import (get_new_requests, get_request, accept_request, get_user,
                     get_engineer_requests, complete_request,
                     get_archived_requests) # –£–±—Ä–∞–Ω archive_old_completed_requests
# --- –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏ ---
from bot.keyboards.inline.requests_inline import (
    HistoryNavigationCallback, RequestActionCallback, create_new_requests_keyboard, create_view_request_keyboard,
    create_in_progress_requests_keyboard, create_complete_request_keyboard,
    create_archive_requests_keyboard # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
)
HISTORY_PAGE_SIZE = 5

router = Router()
# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ
router.message.filter(RoleFilter(UserRole.ENGINEER))
router.callback_query.filter(RoleFilter(UserRole.ENGINEER))

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ ---
@router.message(F.text == VIEW_NEW_REQUESTS_BTN_TEXT)
@router.message(Command('view_new_requests'))
async def view_new_requests(message: types.Message, session: AsyncSession):
    logging.info(f"Engineer {message.from_user.id} requested new requests.")
    new_requests = await get_new_requests(session)

    if not new_requests:
        await message.answer("‚úÖ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫
    keyboard = create_new_requests_keyboard(new_requests)
    await message.answer(
        f"üìã –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ ({len(new_requests)} —à—Ç.):",
        reply_markup=keyboard
    )

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–ª–ª–±—ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ ---
@router.callback_query(RequestActionCallback.filter(F.action.in_(["view", "view_my", "view_archive"])))
async def cq_view_request_details(callback: types.CallbackQuery, callback_data: RequestActionCallback, session: AsyncSession):
    request_id = callback_data.request_id
    current_user_id = callback.from_user.id
    action_type = callback_data.action
    logging.info(f"User {current_user_id} viewing request #{request_id} (action: {action_type})")

    request = await get_request(session, request_id)

    if not request:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ —Ç–∞–∫–∏–º –∂–µ) ---
    engineer_name = f"{escape(request.engineer.first_name or '')} (ID: {request.engineer.id})" if request.engineer else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
    requester_info = f"{escape(request.requester.first_name or '')} (@{escape(request.requester.username or '')})" if request.requester.username else f"{escape(request.requester.first_name or '')} (ID: {request.requester_id})"
    status_map = {
        RequestStatus.WAITING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç", RequestStatus.IN_PROGRESS: "üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ",
        RequestStatus.COMPLETED: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", RequestStatus.ARCHIVED: "üóÑÔ∏è –í –∞—Ä—Ö–∏–≤–µ (–í—ã–ø–æ–ª–Ω–µ–Ω–∞)",
        RequestStatus.CANCELED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
    }
    status_text = status_map.get(request.status, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({escape(request.status.value)})")
    pc_text = f"<b>–ü–ö/–ò–Ω–≤.:</b> {escape(request.pc_number)}\n" if request.pc_number else ""

    details_text = (
        f"üìÑ <b>–ó–∞—è–≤–∫–∞ #{request.id}</b>\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"<b>–°–æ–∑–¥–∞–Ω–∞:</b> {request.created_at.strftime('%Y-%m-%d %H:%M') if request.created_at else 'N/A'}\n\n"
        f"<b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {requester_info}\n"
        f"<b>–§–ò–û:</b> {escape(request.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {escape(request.contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"<b>–ú–µ—Å—Ç–æ:</b> –ö–æ—Ä–ø—É—Å {escape(request.building)}, –ö–∞–±. {escape(request.room)}\n"
        f"{pc_text}" # –ò–Ω–≤. –Ω–æ–º–µ—Ä (—É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–≥ <b>)
        f"----------------------------\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n{escape(request.description)}\n"
        f"----------------------------\n"
        f"<b>–ü—Ä–∏–Ω—è—Ç–∞:</b> {request.accepted_at.strftime('%Y-%m-%d %H:%M') if request.accepted_at else '-'}\n"
        f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {engineer_name}\n"
        f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {request.completed_at.strftime('%Y-%m-%d %H:%M') if request.completed_at else '-'}\n"
        f"<b>–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:</b> {request.archived_at.strftime('%Y-%m-%d %H:%M') if request.archived_at else '-'}\n"
    )
    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ---
    keyboard = None
    if action_type == "view" and request.status == RequestStatus.WAITING:
        keyboard = create_view_request_keyboard(request_id)
    elif action_type == "view_my" and request.status == RequestStatus.IN_PROGRESS and request.engineer_id == current_user_id:
        keyboard = create_complete_request_keyboard(request_id)
    # –ï—Å–ª–∏ action == 'view_archive' –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –Ω—É–∂–Ω–∞ (keyboard = None)

    await callback.answer()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–æ—â–µ, —á–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏)
    await callback.message.answer(details_text, reply_markup=keyboard)

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–ª–ª–±—ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ ---
@router.callback_query(RequestActionCallback.filter(F.action == "accept"))
async def cq_accept_request(callback: types.CallbackQuery, callback_data: RequestActionCallback, session: AsyncSession, bot: Bot):
     # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º) ...
    request_id = callback_data.request_id
    engineer_id = callback.from_user.id
    logging.info(f"Engineer {engineer_id} trying to accept request #{request_id}")

    updated_request = await accept_request(session, request_id, engineer_id)

    if updated_request:
        # ... (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç–≤–µ—Ç –∫–æ–ª–ª–±—ç–∫—É) ...
        logging.info(f"Request #{request_id} accepted by engineer {engineer_id}")
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!", show_alert=True)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞—è–≤–∫–∏
        final_request = await get_request(session, request_id)
        # ... (—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ updated_details_text –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
        engineer_name = f"{final_request.engineer.first_name} (ID: {final_request.engineer.id})" if final_request.engineer else "–û—à–∏–±–∫–∞"
        requester_info = f"{final_request.requester.first_name} (@{final_request.requester.username})" if final_request.requester.username else f"{final_request.requester.first_name} (ID: {final_request.requester_id})"
        status_map = { # –î—É–±–ª–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
            RequestStatus.WAITING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç", RequestStatus.IN_PROGRESS: "üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ",
            RequestStatus.COMPLETED: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", RequestStatus.ARCHIVED: "üóÑÔ∏è –í –∞—Ä—Ö–∏–≤–µ",
            RequestStatus.CANCELED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
        }
        status_text = status_map.get(final_request.status, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({final_request.status.value})")
        updated_details_text = (
            f"üìÑ –ó–∞—è–≤–∫–∞ #{final_request.id}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"–°–æ–∑–¥–∞–Ω–∞: {final_request.created_at.strftime('%Y-%m-%d %H:%M') if final_request.created_at else 'N/A'}\n"
            f"–ó–∞—è–≤–∏—Ç–µ–ª—å: {requester_info}\n"
            f"----------------------------\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{final_request.description}\n"
            f"----------------------------\n"
            f"<b>–ú–µ—Å—Ç–æ:</b> –ö–æ—Ä–ø—É—Å {escape(final_request.building)}, –ö–∞–±. {escape(final_request.room)}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {final_request.contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"----------------------------\n"
            f"–ü—Ä–∏–Ω—è—Ç–∞: {final_request.accepted_at.strftime('%Y-%m-%d %H:%M') if final_request.accepted_at else '-'}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {engineer_name}\n"
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞: {final_request.completed_at.strftime('%Y-%m-%d %H:%M') if final_request.completed_at else '-'}\n"
        )
        try:
            await callback.message.edit_text(updated_details_text, reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        except Exception as e:
            logging.error(f"Failed to edit message after accepting request {request_id}: {e}")
            await callback.message.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ---
        client_id = updated_request.requester_id
        engineer_user = await get_user(session, engineer_id)
        if client_id and engineer_user:
            try:
                await bot.send_message(
                    chat_id=client_id,
                    text=f"üîî –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{request_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏–Ω–∂–µ–Ω–µ—Ä–æ–º {engineer_user.first_name}."
                )
                logging.info(f"Sent notification to client {client_id} about request {request_id} acceptance.")
            except Exception as e:
                logging.error(f"Failed to send notification to client {client_id} for request {request_id}: {e}")
    else:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è) ...
        logging.warning(f"Engineer {engineer_id} failed to accept request #{request_id} (possibly already taken).")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –µ–µ —É–∂–µ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –∏–Ω–∂–µ–Ω–µ—Ä.", show_alert=True)
        # ... (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∫–∞–∫ —Ä–∞–Ω—å—à–µ) ...
        try:
            request_info = await get_request(session, request_id)
            if request_info and request_info.status != RequestStatus.WAITING:
                 await callback.message.edit_text(f"–ó–∞—è–≤–∫–∞ #{request_id} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ '{status_map.get(request_info.status, request_info.status.value)}'.", reply_markup=None)
            else:
                 await callback.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id}.", reply_markup=None)
        except Exception as e:
            logging.error(f"Failed to edit message after failed acceptance for request {request_id}: {e}")


# --- –ù–û–í–´–ô: –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ---
@router.callback_query(RequestActionCallback.filter(F.action == "complete"))
async def cq_complete_request(callback: types.CallbackQuery, callback_data: RequestActionCallback, session: AsyncSession, bot: Bot):
    request_id = callback_data.request_id
    engineer_id = callback.from_user.id
    # --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –õ–û–ì ---
    logging.info(f"Engineer {engineer_id} trying to complete and archive request #{request_id}")

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é complete_request, –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–∑—É –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç
    completed_db_request = await complete_request(session, request_id, engineer_id)

    if completed_db_request:
        # --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –õ–û–ì –ò –û–¢–í–ï–¢ ---
        logging.info(f"Request #{request_id} completed and archived by engineer {engineer_id}")
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é!", show_alert=True) # –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏, —Å—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç ARCHIVED
        engineer_name = f"{completed_db_request.engineer.first_name} (ID: {completed_db_request.engineer.id})" if completed_db_request.engineer else "–û—à–∏–±–∫–∞"
        requester_info = f"{completed_db_request.requester.first_name} (@{completed_db_request.requester.username})" if completed_db_request.requester.username else f"{completed_db_request.requester.first_name} (ID: {completed_db_request.requester_id})"
        status_map = {
            RequestStatus.WAITING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç", RequestStatus.IN_PROGRESS: "üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ",
            RequestStatus.COMPLETED: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            RequestStatus.ARCHIVED: "üóÑÔ∏è –í –∞—Ä—Ö–∏–≤–µ (–í—ã–ø–æ–ª–Ω–µ–Ω–∞)", # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç
            RequestStatus.CANCELED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
        }
        status_text = status_map.get(completed_db_request.status, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({completed_db_request.status.value})")

        final_details_text = (
            f"üìÑ –ó–∞—è–≤–∫–∞ #{completed_db_request.id}\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n" # –ë—É–¥–µ—Ç "–í –∞—Ä—Ö–∏–≤–µ (–í—ã–ø–æ–ª–Ω–µ–Ω–∞)"
            f"–°–æ–∑–¥–∞–Ω–∞: {completed_db_request.created_at.strftime('%Y-%m-%d %H:%M') if completed_db_request.created_at else 'N/A'}\n"
            f"–ó–∞—è–≤–∏—Ç–µ–ª—å: {requester_info}\n"
            f"----------------------------\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{completed_db_request.description}\n"
            f"----------------------------\n"
            f"<b>–ú–µ—Å—Ç–æ:</b> –ö–æ—Ä–ø—É—Å {escape(completed_db_request.building)}, –ö–∞–±. {escape(completed_db_request.room)}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {completed_db_request.contact_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"----------------------------\n"
            f"–ü—Ä–∏–Ω—è—Ç–∞: {completed_db_request.accepted_at.strftime('%Y-%m-%d %H:%M') if completed_db_request.accepted_at else '-'}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {engineer_name}\n"
            f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞: {completed_db_request.completed_at.strftime('%Y-%m-%d %H:%M') if completed_db_request.completed_at else '–¢–æ–ª—å–∫–æ —á—Ç–æ'}\n"
            f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {completed_db_request.archived_at.strftime('%Y-%m-%d %H:%M') if completed_db_request.archived_at else '–¢–æ–ª—å–∫–æ —á—Ç–æ'}\n"
        )
        try:
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
            await callback.message.edit_text(final_details_text, reply_markup=None)
        except Exception as e:
            logging.error(f"Failed to edit message after completing/archiving request {request_id}: {e}")
            await callback.message.answer("–ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É (—Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        client_id = completed_db_request.requester_id
        if client_id:
            try:
                await bot.send_message(
                    chat_id=client_id,
                    text=f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{request_id} –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
                )
                logging.info(f"Sent completion notification to client {client_id} for request {request_id}.")
            except Exception as e:
                logging.error(f"Failed to send completion notification to client {client_id} for request {request_id}: {e}")

    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å
        logging.warning(f"Engineer {engineer_id} failed to complete/archive request #{request_id}.")
        # (–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–æ–π –∂–µ, –∫–∞–∫ –±—ã–ª–∞ –¥–ª—è complete)
        current_request = await get_request(session, request_id)
        error_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É #{request_id}."
        status_map = { # –ù—É–∂–µ–Ω –º–∞–ø–ø–∏–Ω–≥ –∏ –∑–¥–µ—Å—å
            RequestStatus.WAITING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç", RequestStatus.IN_PROGRESS: "üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ",
            RequestStatus.COMPLETED: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", RequestStatus.ARCHIVED: "üóÑÔ∏è –í –∞—Ä—Ö–∏–≤–µ (–í—ã–ø–æ–ª–Ω–µ–Ω–∞)",
            RequestStatus.CANCELED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
        }
        if current_request:
            if current_request.status != RequestStatus.IN_PROGRESS:
                error_text += f" –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: '{status_map.get(current_request.status, current_request.status.value)}'."
            elif current_request.engineer_id != engineer_id:
                error_text += " –û–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞."
            else:
                 error_text += " –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞."
        else:
            error_text += " –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

        await callback.answer(error_text, show_alert=True)
        try:
             await callback.message.edit_text(error_text, reply_markup=None)
        except Exception as e:
             logging.error(f"Failed to edit message after failed completion/archiving for request {request_id}: {e}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ –∞—Ä—Ö–∏–≤–∞/–∏—Å—Ç–æ—Ä–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è
@router.callback_query(F.data == "ignore_empty_archive")
async def cq_ignore_empty(callback: types.CallbackQuery):
    await callback.answer()

@router.message(F.text == VIEW_NEW_REQUESTS_BTN_TEXT)
@router.message(Command('view_new_requests'))
async def view_new_requests_handler(message: types.Message, session: AsyncSession):
    # ... (–∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º) ...
    logging.info(f"Engineer {message.from_user.id} requested new requests.")
    new_requests = await get_new_requests(session)
    if not new_requests:
        await message.answer("‚úÖ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
        return
    keyboard = create_new_requests_keyboard(new_requests)
    await message.answer(
        f"üìã –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ ({len(new_requests)} —à—Ç.):",
        reply_markup=keyboard
    )

# --- –ù–û–í–´–ô: –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –°–í–û–ò–• –∑–∞—è–≤–æ–∫ –í –†–ê–ë–û–¢–ï ---
@router.message(F.text == MY_ASSIGNED_REQUESTS_BTN_TEXT)
@router.message(Command('my_requests'))
async def view_my_requests_handler(message: types.Message, session: AsyncSession):
    engineer_id = message.from_user.id
    logging.info(f"Engineer {engineer_id} requested their assigned requests.")
    in_progress_requests = await get_engineer_requests(session, engineer_id)

    if not in_progress_requests:
        await message.answer("üëç –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ.")
        return

    keyboard = create_in_progress_requests_keyboard(in_progress_requests)
    await message.answer(
        f"üõ†Ô∏è –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ ({len(in_progress_requests)} —à—Ç.):",
        reply_markup=keyboard
    )


@router.message(F.text == HISTORY_BTN_TEXT)
@router.message(Command('archive')) # –∏–ª–∏ /history
async def view_history_handler(message: types.Message, session: AsyncSession):
    engineer_id = message.from_user.id # <-- –ü–æ–ª—É—á–∞–µ–º ID –∏–Ω–∂–µ–Ω–µ—Ä–∞
    logging.info(f"Engineer {engineer_id} requested THEIR history page 0 (default sort).")
    current_page = 0
    current_sort = 'date_desc'
    offset = current_page * ADMIN_HISTORY_PAGE_SIZE # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–ª–∏ —Å–≤–æ—é

    # --- –í–´–ó–´–í–ê–ï–ú CRUD –° engineer_id ---
    archived_requests, total_count = await get_archived_requests(
        session=session,
        limit=ADMIN_HISTORY_PAGE_SIZE,
        offset=offset,
        sort_by=current_sort,
        engineer_id=engineer_id # <-- –ü–µ—Ä–µ–¥–∞–µ–º ID
    )
    # -----------------------------------
    total_pages = math.ceil(total_count / ADMIN_HISTORY_PAGE_SIZE) if total_count > 0 else 0

    keyboard = create_archive_requests_keyboard(
        requests=archived_requests,
        current_page=current_page,
        total_pages=total_pages,
        current_sort=current_sort
        # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º user_role=UserRole.ADMIN
    )
    count_text = f" (–ù–∞–π–¥–µ–Ω–æ: {total_count})" if total_count > 0 else ""
    await message.answer(
        f"üìö –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–∞—è–≤–æ–∫{count_text}:", # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        reply_markup=keyboard
    )

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ò–ù–ñ–ï–ù–ï–†–û–ú ---
# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞
@router.callback_query(RoleFilter(UserRole.ENGINEER), HistoryNavigationCallback.filter(F.action == "page"))
async def cq_engineer_history_page_handler(callback: types.CallbackQuery, callback_data: HistoryNavigationCallback, session: AsyncSession):
     engineer_id = callback.from_user.id # <-- –ü–æ–ª—É—á–∞–µ–º ID –∏–Ω–∂–µ–Ω–µ—Ä–∞
     current_page = callback_data.page
     current_sort = callback_data.sort_by
     logging.info(f"Engineer {engineer_id} requested THEIR history page {current_page} (sort: {current_sort}).")

     if current_page < 0: await callback.answer(); return
     offset = current_page * ADMIN_HISTORY_PAGE_SIZE

     # --- –í–´–ó–´–í–ê–ï–ú CRUD –° engineer_id ---
     archived_requests, total_count = await get_archived_requests(
         session=session,
         limit=ADMIN_HISTORY_PAGE_SIZE,
         offset=offset,
         sort_by=current_sort,
         engineer_id=engineer_id # <-- –ü–µ—Ä–µ–¥–∞–µ–º ID
     )
     # -----------------------------------
     total_pages = math.ceil(total_count / ADMIN_HISTORY_PAGE_SIZE) if total_count > 0 else 0

     # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     if current_page >= total_pages and current_page > 0:
         current_page = max(0, total_pages - 1)
         offset = current_page * ADMIN_HISTORY_PAGE_SIZE
         # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Å engineer_id
         archived_requests, total_count = await get_archived_requests(
              session, ADMIN_HISTORY_PAGE_SIZE, offset, current_sort, engineer_id=engineer_id
         )
         total_pages = math.ceil(total_count / ADMIN_HISTORY_PAGE_SIZE) if total_count > 0 else 0

     keyboard = create_archive_requests_keyboard(
          archived_requests, current_page, total_pages, current_sort
          # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º user_role=UserRole.ADMIN
     )
     text = f"üìö –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–∞—è–≤–æ–∫ (–í—Å–µ–≥–æ: {total_count}):" # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç

     try:
         if callback.message and callback.message.reply_markup != keyboard:
              await callback.message.edit_text(text, reply_markup=keyboard)
     except TelegramBadRequest: pass
     except Exception as e: logging.error(f"Error editing message for engineer history pagination: {e}")

     await callback.answer()

# --- –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
@router.callback_query(F.data.startswith("ignore_"))
async def cq_ignore_pagination(callback: types.CallbackQuery):
    await callback.answer()

