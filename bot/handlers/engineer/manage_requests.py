# bot/handlers/engineer/manage_requests.py
import logging
import math
from html import escape
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.ext.asyncio import AsyncSession

# –§–∏–ª—å—Ç—Ä —Ä–æ–ª–µ–π –∏ –º–æ–¥–µ–ª—å —Ä–æ–ª–∏
from bot.filters.role import RoleFilter
from db.models import UserRole, RequestStatus

# –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –∏–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from bot.keyboards.reply import (
    VIEW_NEW_REQUESTS_BTN_TEXT, MY_ASSIGNED_REQUESTS_BTN_TEXT, HISTORY_BTN_TEXT
)

# CRUD —Ñ—É–Ω–∫—Ü–∏–∏
from db.crud import (
    get_new_requests, get_request, accept_request, get_user,
    get_engineer_requests, complete_request, get_archived_requests
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ CallbackData
from bot.keyboards.inline.requests_inline import (
    create_new_requests_keyboard, create_view_request_keyboard,
    create_complete_request_keyboard, RequestActionCallback,
    create_archive_requests_keyboard, HistoryNavigationCallback,
    create_engineer_active_requests_keyboard, EngActiveNavCallback
)
# –ò–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–Ω–∂–µ–Ω–µ—Ä–∞
from bot.keyboards.inline.engineer_inline import get_engineer_main_menu

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ENG_ACTIVE_PAGE_SIZE = 5 
ENG_HISTORY_PAGE_SIZE = 5 

router = Router()

router.message.filter(RoleFilter(UserRole.ENGINEER))
router.callback_query.filter(RoleFilter(UserRole.ENGINEER))

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–Ω–∂–µ–Ω–µ—Ä–∞ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥) ---
@router.callback_query(F.data == "back_to_main_menu_eng")
async def back_to_main_menu_eng(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–Ω–∂–µ–Ω–µ—Ä–∞."""
    await callback.answer()
    try:
        if callback.message:
            await callback.message.edit_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ò–Ω–∂–µ–Ω–µ—Ä–∞:",
                reply_markup=get_engineer_main_menu()
            )
    except TelegramBadRequest: pass
    except Exception as e:
        logging.error(f"Error showing engineer main menu: {e}", exc_info=True)
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ò–Ω–∂–µ–Ω–µ—Ä–∞:", reply_markup=get_engineer_main_menu())
        except Exception as e2:
             logging.error(f"Failed to send engineer main menu as new message: {e2}", exc_info=True)

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ù–û–í–´–• –∑–∞—è–≤–æ–∫ ---
@router.message(F.text == VIEW_NEW_REQUESTS_BTN_TEXT)
@router.message(Command('view_new_requests'))
@router.callback_query(F.data == "eng_view_new") # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –Ω–æ–≤—ã–º"
async def view_new_requests(event: types.Message | types.CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)."""
    user_id = event.from_user.id
    logging.info(f"Engineer {user_id} requested new requests list.")
    new_requests = await get_new_requests(session)

    text = "üìù –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è:"
    keyboard = create_new_requests_keyboard(new_requests)
    if not new_requests:
        text = "‚úÖ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç."
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu_eng"))
        keyboard = builder.as_markup()

    if isinstance(event, types.Message):
        await event.answer(text, reply_markup=keyboard)
    elif isinstance(event, types.CallbackQuery) and event.message:
        await event.answer() 
        try:
            await event.message.edit_text(text, reply_markup=keyboard)
        except TelegramBadRequest: pass
        except Exception as e: logging.error(f"Error editing message for new requests view: {e}", exc_info=True)


@router.message(F.text == MY_ASSIGNED_REQUESTS_BTN_TEXT)
@router.message(Command('my_requests'))
async def view_my_active_requests_first(message: types.Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–Ω–∂–µ–Ω–µ—Ä–∞."""
    engineer_id = message.from_user.id
    logging.info(f"Engineer {engineer_id} requested own active requests FIRST page (default sort).")
    current_page = 0
    current_sort = 'accepted_asc' # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    offset = current_page * ENG_ACTIVE_PAGE_SIZE

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CRUD —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    active_requests, total_count = await get_engineer_requests(
        session=session, engineer_id=engineer_id, limit=ENG_ACTIVE_PAGE_SIZE,
        offset=offset, sort_by=current_sort
    )
    total_pages = math.ceil(total_count / ENG_ACTIVE_PAGE_SIZE) if total_count > 0 else 0

    keyboard = create_engineer_active_requests_keyboard(
        active_requests, current_page, total_pages, current_sort
    )
    text = f"üõ†Ô∏è –ú–æ–∏ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ (–í—Å–µ–≥–æ: {total_count}):"
    if total_count == 0:
        text = "üëç –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ."
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
@router.callback_query(EngActiveNavCallback.filter(F.action == "page"))
async def view_my_active_requests_page(callback: types.CallbackQuery, callback_data: EngActiveNavCallback, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–Ω–∂–µ–Ω–µ—Ä–∞."""
    engineer_id = callback.from_user.id
    current_page = callback_data.page
    current_sort = callback_data.sort_by
    logging.info(f"Engineer {engineer_id} requested own active requests page {current_page} (sort: {current_sort}).")

    if current_page < 0: await callback.answer(); return

    offset = current_page * ENG_ACTIVE_PAGE_SIZE
    active_requests, total_count = await get_engineer_requests(
        session=session, engineer_id=engineer_id, limit=ENG_ACTIVE_PAGE_SIZE,
        offset=offset, sort_by=current_sort
    )
    total_pages = math.ceil(total_count / ENG_ACTIVE_PAGE_SIZE) if total_count > 0 else 0

    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø—É—Å—Ç–µ–ª–∞)
    if current_page >= total_pages and current_page > 0:
        current_page = max(0, total_pages - 1)
        offset = current_page * ENG_ACTIVE_PAGE_SIZE
        active_requests, total_count = await get_engineer_requests(
             session, engineer_id, ENG_ACTIVE_PAGE_SIZE, offset, current_sort
        )
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º total_pages –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        total_pages = math.ceil(total_count / ENG_ACTIVE_PAGE_SIZE) if total_count > 0 else 0


    keyboard = create_engineer_active_requests_keyboard(
        active_requests, current_page, total_pages, current_sort
    )
    text = f"üõ†Ô∏è –ú–æ–∏ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ (–í—Å–µ–≥–æ: {total_count}):"
    if total_count == 0 and current_page == 0: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
         text = "üëç –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ."

    await callback.answer()
    try:
        if callback.message:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if callback.message.text != text or callback.message.reply_markup != keyboard:
                 await callback.message.edit_text(text, reply_markup=keyboard)
            else:
                 logging.debug("Engineer active page: Message not modified.")
    except TelegramBadRequest: pass
    except Exception as e: logging.error(f"Error editing message for engineer active pagination: {e}", exc_info=True)


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ò–°–¢–û–†–ò–ò –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ (–° –ü–ê–ì–ò–ù–ê–¶–ò–ï–ô) ---
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞ (–ø–æ –∫–Ω–æ–ø–∫–µ/–∫–æ–º–∞–Ω–¥–µ)
@router.message(F.text == HISTORY_BTN_TEXT)
@router.message(Command('archive')) # –∏–ª–∏ /history
async def view_history_first(message: types.Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫ –∏–Ω–∂–µ–Ω–µ—Ä–∞."""
    engineer_id = message.from_user.id
    logging.info(f"Engineer {engineer_id} requested THEIR history FIRST page (default sort).")
    current_page = 0
    current_sort = 'date_desc' # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    offset = current_page * ENG_HISTORY_PAGE_SIZE

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º CRUD —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∏–Ω–∂–µ–Ω–µ—Ä—É
    archived_requests, total_count = await get_archived_requests(
        session=session, engineer_id=engineer_id, # –ü–µ—Ä–µ–¥–∞–µ–º ID –∏–Ω–∂–µ–Ω–µ—Ä–∞
        limit=ENG_HISTORY_PAGE_SIZE, offset=offset, sort_by=current_sort
    )
    total_pages = math.ceil(total_count / ENG_HISTORY_PAGE_SIZE) if total_count > 0 else 0

    keyboard = create_archive_requests_keyboard(
         archived_requests, current_page, total_pages, current_sort,
         user_role=UserRole.ENGINEER # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–æ–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
    )
    text = f"üìö –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–∞—è–≤–æ–∫ (–í—Å–µ–≥–æ: {total_count}):"
    if total_count == 0:
         text = "üóÑÔ∏è –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."

    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–Ω–∂–µ–Ω–µ—Ä–æ–º
@router.callback_query(HistoryNavigationCallback.filter(F.action == "page"))
async def view_history_page(callback: types.CallbackQuery, callback_data: HistoryNavigationCallback, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫ –∏–Ω–∂–µ–Ω–µ—Ä–∞."""
    engineer_id = callback.from_user.id
    current_page = callback_data.page
    current_sort = callback_data.sort_by
    logging.info(f"Engineer {engineer_id} requested own history page {current_page} (sort: {current_sort}).")


    if current_page < 0: await callback.answer(); return

    offset = current_page * ENG_HISTORY_PAGE_SIZE
    archived_requests, total_count = await get_archived_requests(
        session=session, engineer_id=engineer_id, # –ü–µ—Ä–µ–¥–∞–µ–º ID –∏–Ω–∂–µ–Ω–µ—Ä–∞
        limit=ENG_HISTORY_PAGE_SIZE, offset=offset, sort_by=current_sort
    )
    total_pages = math.ceil(total_count / ENG_HISTORY_PAGE_SIZE) if total_count > 0 else 0

    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if current_page >= total_pages and current_page > 0:
        current_page = max(0, total_pages - 1)
        offset = current_page * ENG_HISTORY_PAGE_SIZE
        archived_requests, total_count = await get_archived_requests(
             session, engineer_id=engineer_id, limit=ENG_HISTORY_PAGE_SIZE, offset=offset, sort_by=current_sort
        )
        total_pages = math.ceil(total_count / ENG_HISTORY_PAGE_SIZE) if total_count > 0 else 0

    keyboard = create_archive_requests_keyboard(
         archived_requests, current_page, total_pages, current_sort,
         user_role=UserRole.ENGINEER # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–æ–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
    )
    text = f"üìö –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –∑–∞—è–≤–æ–∫ (–í—Å–µ–≥–æ: {total_count}):"
    if total_count == 0 and current_page == 0:
         text = "üóÑÔ∏è –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –ø—É—Å—Ç–∞."

    await callback.answer()
    try:
        if callback.message:
             if callback.message.text != text or callback.message.reply_markup != keyboard:
                  await callback.message.edit_text(text, reply_markup=keyboard)
             else:
                  logging.debug("Engineer history page: Message not modified.")
    except TelegramBadRequest: pass
    except Exception as e: logging.error(f"Error editing message for engineer history pagination: {e}", exc_info=True)



async def show_request_details(
    callback: types.CallbackQuery,
    request_id: int,
    session: AsyncSession,
    view_mode: str 
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏."""
    user_id = callback.from_user.id
    logging.info(f"Engineer {user_id} viewing request {request_id} in mode '{view_mode}'")

    request = await get_request(session, request_id)
    if not request:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if view_mode == 'new':
            await view_new_requests(callback, session)
        try:
            if callback.message: await callback.message.delete() 
        except Exception: pass
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
    status_map = {
        RequestStatus.WAITING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è",
        RequestStatus.IN_PROGRESS: "üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ",
        RequestStatus.ARCHIVED: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ (–≤ –∞—Ä—Ö–∏–≤–µ)",
        RequestStatus.CANCELED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
    }
    status_text = status_map.get(request.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
    client_name = f"{request.requester.first_name or ''} {request.requester.last_name or ''}".strip()
    client_name = client_name or f"ID:{request.requester_id}"
    engineer_name = f"{request.engineer.first_name or ''} {request.engineer.last_name or ''}".strip() if request.engineer else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

    created_at = request.created_at.strftime('%Y-%m-%d %H:%M') if request.created_at else "N/A"
    accepted_at = request.accepted_at.strftime('%Y-%m-%d %H:%M') if request.accepted_at else "-"
    completed_at = request.completed_at.strftime('%Y-%m-%d %H:%M') if request.completed_at else "-"
    archived_at = request.archived_at.strftime('%Y-%m-%d %H:%M') if request.archived_at else "-"

    location = f"{escape(request.building)}, –∫–∞–±. {escape(request.room)}"
    pc_text = f"\n<b>–ü–ö/–ò–Ω–≤. –Ω–æ–º–µ—Ä:</b> {escape(request.pc_number)}" if request.pc_number else ""
    phone_text = f"\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {escape(request.contact_phone)}" if request.contact_phone else ""
    full_name_text = f"\n<b>–§–ò–û (–∏–∑ –∑–∞—è–≤–∫–∏):</b> {escape(request.full_name)}" if request.full_name else ""

    details_text_lines = [
        f"<b>–ó–∞—è–≤–∫–∞ #{request.id}</b>",
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}",
        f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {escape(client_name)}",
        f"<b>–ú–µ—Å—Ç–æ:</b> {location}{pc_text}{phone_text}{full_name_text}",
        f"<b>–ò–Ω–∂–µ–Ω–µ—Ä:</b> {escape(engineer_name)}",
        f"<b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_at}",
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if request.accepted_at: details_text_lines.append(f"<b>–ü—Ä–∏–Ω—è—Ç–∞:</b> {accepted_at}")
    if request.completed_at: details_text_lines.append(f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {completed_at}")
    if request.archived_at and request.status == RequestStatus.ARCHIVED:
        details_text_lines.append(f"<b>–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:</b> {archived_at}")

    details_text_lines.append(f"\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{escape(request.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")

    text = "\n".join(details_text_lines)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = None
    if request.status == RequestStatus.WAITING and view_mode == 'new':
        keyboard = create_view_request_keyboard(request_id) # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–Ω—è—Ç—å" + "–ù–∞–∑–∞–¥"
    elif request.status == RequestStatus.IN_PROGRESS and view_mode == 'active_eng':
        if request.engineer_id == user_id:
             keyboard = create_complete_request_keyboard(request_id) # –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å" + "–ù–∞–∑–∞–¥"
        else:
            # –ò–Ω–∂–µ–Ω–µ—Ä —Å–º–æ—Ç—Ä–∏—Ç —á—É–∂—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
             builder = InlineKeyboardBuilder()
             builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu_eng"))
             keyboard = builder.as_markup()
    elif view_mode == 'archive':
        # –î–ª—è –∞—Ä—Ö–∏–≤–∞ –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu_eng"))
        keyboard = builder.as_markup()


    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer()
    try:
        if callback.message:
            if callback.message.text != text or callback.message.reply_markup != keyboard:
                 await callback.message.edit_text(text, reply_markup=keyboard)
            else:
                 logging.debug(f"Request details {request_id} message not modified.")
    except TelegramBadRequest: pass
    except Exception as e: logging.error(f"Error editing message for request view {request_id}: {e}", exc_info=True)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ (–∏–∑ —Å–ø–∏—Å–∫–∞ view_new_requests)
@router.callback_query(RequestActionCallback.filter(F.action == "view"))
async def cq_view_request(callback: types.CallbackQuery, callback_data: RequestActionCallback, session: AsyncSession):
    await show_request_details(callback, callback_data.request_id, session, view_mode='new')

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É
@router.callback_query(RequestActionCallback.filter(F.action == "accept"))
async def cq_accept_request(callback: types.CallbackQuery, callback_data: RequestActionCallback, session: AsyncSession, bot: Bot):
    engineer_id = callback.from_user.id
    request_id = callback_data.request_id
    logging.info(f"Engineer {engineer_id} trying to accept request {request_id}")

    updated_request = await accept_request(session, request_id, engineer_id)

    if updated_request:
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!", show_alert=False)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –ó–∞–≤–µ—Ä—à–∏—Ç—å
        await show_request_details(callback, request_id, session, view_mode='active_eng')

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        try:
            client_text = (f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∏–Ω–∂–µ–Ω–µ—Ä–æ–º "
                           f"{updated_request.engineer.first_name if updated_request.engineer else ''}.")
            await bot.send_message(updated_request.requester_id, client_text)
            logging.info(f"Sent notification to client {updated_request.requester_id} about request {request_id} acceptance.")
        except Exception as e:
            logging.error(f"Failed to send acceptance notification to client {updated_request.requester_id}: {e}")
    else:
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞).", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
        try:
            if isinstance(callback, types.CallbackQuery):
                 await view_new_requests(callback, session)
        except Exception as e:
            logging.error(f"Failed to refresh new requests list after failed accept: {e}")


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ (–∏–∑ —Å–ø–∏—Å–∫–∞ view_my_active_requests_page)
@router.callback_query(RequestActionCallback.filter(F.action == "view_my"))
async def cq_view_my_request(callback: types.CallbackQuery, callback_data: RequestActionCallback, session: AsyncSession):
    await show_request_details(callback, callback_data.request_id, session, view_mode='active_eng')

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
@router.callback_query(RequestActionCallback.filter(F.action == "complete"))
async def cq_complete_request(callback: types.CallbackQuery, callback_data: RequestActionCallback, session: AsyncSession, bot: Bot):
    engineer_id = callback.from_user.id
    request_id = callback_data.request_id
    logging.info(f"Engineer {engineer_id} trying to complete request {request_id}")

    completed_request = await complete_request(session, request_id, engineer_id)

    if completed_request:
        await callback.answer("üèÅ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=False)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
        await show_request_details(callback, request_id, session, view_mode='archive')

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        try:
            client_text = (f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n"
                           "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
            await bot.send_message(completed_request.requester_id, client_text)
            logging.info(f"Sent notification to client {completed_request.requester_id} about request {request_id} completion.")
        except Exception as e:
            logging.error(f"Failed to send completion notification to client {completed_request.requester_id}: {e}")
    else:
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å).", show_alert=True)
        try:
            await show_request_details(callback, request_id, session, view_mode='active_eng')
        except Exception as e:
             logging.error(f"Failed show details after failed complete: {e}")


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ (–∏–∑ —Å–ø–∏—Å–∫–∞ view_history_page)
@router.callback_query(RequestActionCallback.filter(F.action == "view_archive"))
async def cq_view_archive_request(callback: types.CallbackQuery, callback_data: RequestActionCallback, session: AsyncSession):
    await show_request_details(callback, callback_data.request_id, session, view_mode='archive')


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ ---
@router.callback_query(F.data.startswith("ignore_"))
async def cq_ignore_pagination(callback: types.CallbackQuery):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫–∏ –æ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    await callback.answer()