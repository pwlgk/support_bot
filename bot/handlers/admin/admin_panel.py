# bot/handlers/admin/admin_panel.py
from html import escape
import logging
import math
from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from sqlalchemy.ext.asyncio import AsyncSession
from bot.gpt.yagpt_integration import enable_gpt, disable_gpt, get_gpt_status

from bot.filters.role import RoleFilter
from db.models import UserRole, User
# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–æ–≤
from db.crud import get_all_in_progress_requests, get_all_users, get_archived_requests, get_user, set_user_role
from bot.keyboards.inline.admin_inline import (
    get_admin_main_menu, AdminActiveNavCallback, create_admin_active_requests_keyboard,
    AdminUserManageCallback, create_admin_users_list_keyboard, create_admin_user_profile_keyboard # <--- –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã
)
from bot.keyboards.reply import ADMIN_PANEL_BTN_TEXT
from bot.keyboards.inline.requests_inline import (
    HistoryNavigationCallback, create_archive_requests_keyboard # –î–ª—è –∏—Å—Ç–æ—Ä–∏–∏
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ADMIN_USERS_PAGE_SIZE = 10 # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ADMIN_ACTIVE_PAGE_SIZE = 10
ADMIN_HISTORY_PAGE_SIZE = 10


router = Router()
# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ê–¥–º–∏–Ω–∞ –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º —ç—Ç–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
router.message.filter(RoleFilter(UserRole.ADMIN))
router.callback_query.filter(RoleFilter(UserRole.ADMIN))

# --- –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@router.message(Command("admin"))
@router.message(F.text == ADMIN_PANEL_BTN_TEXT)
async def cmd_admin(message: types.Message):
    await message.answer("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_main_menu())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ ---

@router.callback_query(F.data == "admin_manage_users")
async def cq_admin_manage_users(callback: types.CallbackQuery):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Ç–µ–∫—Å—Ç —Å < –∏ >
    text = (
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞–º–∏:\n\n"
        "üîπ `/list_engineers` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤\n"
        "üîπ `/add_engineer <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>` - –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–º\n"
        "üîπ `/remove_engineer <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>` - –†–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –∏–Ω–∂–µ–Ω–µ—Ä–∞ –¥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
        "<i>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</i> ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é @userinfobot, "
        "–ø–æ–ø—Ä–æ—Å–∏–≤ –Ω—É–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
    )
    await callback.answer()
    try:
        # --- –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ë–ï–ó PARSE_MODE ---
        await callback.message.answer(text, parse_mode=None)
        logging.info("Sent admin manage users text with parse_mode=None")
        # ----------------------------------
    except Exception as e:
        logging.error(f"Error sending admin manage users text (parse_mode=None): {e}", exc_info=True)
        await callback.message.answer("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")

        
@router.callback_query(F.data == "admin_view_active")
async def cq_admin_view_active(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    logging.info(f"Admin {user_id} requested active requests page 0.")
    current_page = 0
    current_sort = 'accepted_asc' # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
    offset = current_page * ADMIN_ACTIVE_PAGE_SIZE

    active_requests, total_count = await get_all_in_progress_requests(
        session, limit=ADMIN_ACTIVE_PAGE_SIZE, offset=offset, sort_by=current_sort
    )
    total_pages = math.ceil(total_count / ADMIN_ACTIVE_PAGE_SIZE) if total_count > 0 else 0

    keyboard = create_admin_active_requests_keyboard(
        active_requests, current_page, total_pages, current_sort
    )
    text = f"üõ†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–í—Å–µ–≥–æ: {total_count}):"

    await callback.answer()
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest: # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        pass
    except Exception as e:
         logging.error(f"Error editing message for admin active requests: {e}", exc_info=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö" –ê–î–ú–ò–ù–û–ú ---
@router.callback_query(F.data == "admin_view_history")
async def cq_admin_view_history(callback: types.CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    logging.info(f"Admin {user_id} requested ALL history page 0.")
    current_page = 0
    current_sort = 'date_desc'
    offset = current_page * ADMIN_HISTORY_PAGE_SIZE

    # --- –í–´–ó–´–í–ê–ï–ú CRUD –ë–ï–ó engineer_id ---
    archived_requests, total_count = await get_archived_requests(
        session=session,
        limit=ADMIN_HISTORY_PAGE_SIZE,
        offset=offset,
        sort_by=current_sort
        # engineer_id –ù–ï –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
    )
    # -----------------------------------
    total_pages = math.ceil(total_count / ADMIN_HISTORY_PAGE_SIZE) if total_count > 0 else 0

    keyboard = create_archive_requests_keyboard(
         archived_requests, current_page, total_pages, current_sort,
         user_role=UserRole.ADMIN # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–æ–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    )
    text = f"üìö –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö (–í—Å–µ–≥–æ: {total_count}):" # –¢–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞

    await callback.answer()
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest: pass
    except Exception as e: logging.error(f"Error editing message for admin history view: {e}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ê–î–ú–ò–ù–û–ú ---
@router.callback_query(HistoryNavigationCallback.filter(F.action == "page"))
async def cq_admin_history_page(callback: types.CallbackQuery, callback_data: HistoryNavigationCallback, session: AsyncSession):
    user_id = callback.from_user.id
    current_page = callback_data.page
    current_sort = callback_data.sort_by
    logging.info(f"Admin {user_id} requested ALL history page {current_page} (sort: {current_sort}).")

    if current_page < 0: await callback.answer(); return
    offset = current_page * ADMIN_HISTORY_PAGE_SIZE

    # --- –í–´–ó–´–í–ê–ï–ú CRUD –ë–ï–ó engineer_id ---
    archived_requests, total_count = await get_archived_requests(
        session=session,
        limit=ADMIN_HISTORY_PAGE_SIZE,
        offset=offset,
        sort_by=current_sort
        # engineer_id –ù–ï –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
    )
    # -----------------------------------
    total_pages = math.ceil(total_count / ADMIN_HISTORY_PAGE_SIZE) if total_count > 0 else 0

    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if current_page >= total_pages and current_page > 0:
        current_page = max(0, total_pages - 1)
        offset = current_page * ADMIN_HISTORY_PAGE_SIZE
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –±–µ–∑ engineer_id
        archived_requests, total_count = await get_archived_requests(
             session, ADMIN_HISTORY_PAGE_SIZE, offset, current_sort
        )
        total_pages = math.ceil(total_count / ADMIN_HISTORY_PAGE_SIZE) if total_count > 0 else 0

    keyboard = create_archive_requests_keyboard(
         archived_requests, current_page, total_pages, current_sort,
         user_role=UserRole.ADMIN # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–æ–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    )
    text = f"üìö –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö (–í—Å–µ–≥–æ: {total_count}):" # –¢–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞

    try:
        if callback.message and callback.message.reply_markup != keyboard:
             await callback.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest: pass
    except Exception as e: logging.error(f"Error editing message for admin history pagination: {e}")

    await callback.answer()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–≤ –∞–¥–º–∏–Ω–∞ ---

@router.callback_query(AdminActiveNavCallback.filter(F.action == "page"))
async def cq_admin_active_page(callback: types.CallbackQuery, callback_data: AdminActiveNavCallback, session: AsyncSession):
    user_id = callback.from_user.id
    current_page = callback_data.page
    current_sort = callback_data.sort_by
    logging.info(f"Admin {user_id} requested active requests page {current_page} (sort: {current_sort}).")

    if current_page < 0:
        await callback.answer()
        return

    offset = current_page * ADMIN_ACTIVE_PAGE_SIZE
    active_requests, total_count = await get_all_in_progress_requests(
        session, limit=ADMIN_ACTIVE_PAGE_SIZE, offset=offset, sort_by=current_sort
    )
    total_pages = math.ceil(total_count / ADMIN_ACTIVE_PAGE_SIZE) if total_count > 0 else 0

    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∞ —Å—Ç–∞–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π
    if current_page >= total_pages and current_page > 0:
        current_page = max(0, total_pages - 1) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–ª–∏ 0
        offset = current_page * ADMIN_ACTIVE_PAGE_SIZE
        active_requests, total_count = await get_all_in_progress_requests(
             session, limit=ADMIN_ACTIVE_PAGE_SIZE, offset=offset, sort_by=current_sort
        )
        total_pages = math.ceil(total_count / ADMIN_ACTIVE_PAGE_SIZE) if total_count > 0 else 0

    keyboard = create_admin_active_requests_keyboard(
        active_requests, current_page, total_pages, current_sort
    )
    text = f"üõ†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–í—Å–µ–≥–æ: {total_count}):"

    try:
        if callback.message and callback.message.reply_markup != keyboard:
             await callback.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest:
        pass
    except Exception as e:
        logging.error(f"Error editing message for admin active pagination: {e}", exc_info=True)

    await callback.answer()


@router.callback_query(AdminUserManageCallback.filter(F.action == "list_page"))
async def cq_admin_users_list(callback: types.CallbackQuery, callback_data: AdminUserManageCallback, session: AsyncSession):
    current_page = callback_data.page
    user_id = callback.from_user.id
    logging.info(f"Admin {user_id} requested users list page {current_page}.")

    if current_page < 0: # –ó–∞—â–∏—Ç–∞
        await callback.answer()
        return

    offset = current_page * ADMIN_USERS_PAGE_SIZE
    users, total_count = await get_all_users(session, limit=ADMIN_USERS_PAGE_SIZE, offset=offset)
    total_pages = math.ceil(total_count / ADMIN_USERS_PAGE_SIZE) if total_count > 0 else 0

    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if current_page >= total_pages and current_page > 0:
        current_page = max(0, total_pages - 1)
        offset = current_page * ADMIN_USERS_PAGE_SIZE
        users, total_count = await get_all_users(session, limit=ADMIN_USERS_PAGE_SIZE, offset=offset)
        total_pages = math.ceil(total_count / ADMIN_USERS_PAGE_SIZE) if total_count > 0 else 0

    keyboard = create_admin_users_list_keyboard(users, current_page, total_pages)
    text = f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–í—Å–µ–≥–æ: {total_count}):"

    await callback.answer()
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞)
        await callback.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest: pass
    except Exception as e: logging.error(f"Error editing message for user list: {e}")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(AdminUserManageCallback.filter(F.action == "view"))
async def cq_admin_view_user(callback: types.CallbackQuery, callback_data: AdminUserManageCallback, session: AsyncSession):
    target_user_id = callback_data.user_id
    admin_id = callback.from_user.id
    logging.info(f"Admin {admin_id} viewing profile for user {target_user_id}.")

    user = await get_user(session, target_user_id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    role_map = {UserRole.ADMIN: "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", UserRole.ENGINEER: "üõ†Ô∏è –ò–Ω–∂–µ–Ω–µ—Ä", UserRole.CLIENT: "üë§ –ö–ª–∏–µ–Ω—Ç"}
    role_text = role_map.get(user.role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    user_name = f"{escape(user.first_name or '')} {escape(user.last_name or '')}".strip()
    user_mention = f"@{escape(user.username)}" if user.username else "–ù–µ—Ç"
    reg_date = user.registered_at.strftime('%Y-%m-%d %H:%M') if user.registered_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"<b>ID:</b> <code>{user.id}</code>\n"
        f"<b>–ò–º—è:</b> {user_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>Username:</b> {user_mention}\n"
        f"<b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b> {role_text}\n"
        f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = create_admin_user_profile_keyboard(user)

    await callback.answer()
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        await callback.message.edit_text(profile_text, reply_markup=keyboard)
    except TelegramBadRequest: pass
    except Exception as e: logging.error(f"Error editing message for user profile view: {e}")


# –°–º–µ–Ω–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(AdminUserManageCallback.filter(F.action == "set_role"))
async def cq_admin_set_role(callback: types.CallbackQuery, callback_data: AdminUserManageCallback, session: AsyncSession):
    target_user_id = callback_data.user_id
    new_role_str = callback_data.new_role
    admin_id = callback.from_user.id

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–æ–ª–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ Enum
    try:
        new_role_enum = UserRole(new_role_str)
    except ValueError:
        logging.error(f"Invalid role string '{new_role_str}' received in set_role callback.")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å —É–∫–∞–∑–∞–Ω–∞.", show_alert=True)
        return

    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω–∏—è —Å–µ–±—è
    if target_user_id == admin_id and new_role_enum != UserRole.ADMIN:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–ª—å —Å –∞–¥–º–∏–Ω–∞ –Ω–∞ –¥—Ä—É–≥—É—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    logging.info(f"Admin {admin_id} trying to set role {new_role_enum.value} for user {target_user_id}.")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é CRUD —Ñ—É–Ω–∫—Ü–∏—é
    updated_user = await set_user_role(session, target_user_id, new_role_enum)

    if updated_user:
        logging.info(f"Role for user {target_user_id} set to {new_role_enum.value} by admin {admin_id}.")
        await callback.answer(f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ '{new_role_enum.value}'!", show_alert=False) # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—É—é —Ä–æ–ª—å –∏ –∫–Ω–æ–ø–∫–∏
        await cq_admin_view_user(callback, callback_data, session) # –í—ã–∑—ã–≤–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ

    else:
        logging.error(f"Failed to set role {new_role_enum.value} for user {target_user_id}.")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—à–∏–±–∫–∞ –ë–î.", show_alert=True)

@router.callback_query(F.data == "admin_back_to_main")
async def cq_admin_back_to_main(callback: types.CallbackQuery):
    logging.info(f"Admin {callback.from_user.id} requested back to main admin menu.") # –î–æ–±–∞–≤–∏–º –ª–æ–≥
    await callback.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.edit_text("üîë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_main_menu())
    except TelegramBadRequest:
        # –ú–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (—É–∂–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?)
        logging.warning("Back to main menu: Message not modified.")
        pass
    except Exception as e:
        logging.error(f"Error editing message to admin main menu: {e}", exc_info=True)
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–Ω–æ–ø–æ–∫ (–º–æ–∂–Ω–æ –≤ –æ–±—â–µ–º —Ä–æ—É—Ç–µ—Ä–µ –∏–ª–∏ –∑–¥–µ—Å—å)
@router.callback_query(F.data.startswith("ignore_"))
async def cq_admin_ignore(callback: types.CallbackQuery):
    await callback.answer()

@router.message(Command("gpt_on"))
async def cmd_gpt_on(message: types.Message):
    if enable_gpt():
        await message.answer("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YandexGPT **–≤–∫–ª—é—á–µ–Ω–∞**.")
    else:
         await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å YandexGPT. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ API-–∫–ª—é—á–∞ –∏ Folder ID –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

@router.message(Command("gpt_off"))
async def cmd_gpt_off(message: types.Message):
    disable_gpt()
    await message.answer("‚òëÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YandexGPT **–æ—Ç–∫–ª—é—á–µ–Ω–∞**.")

@router.message(Command("gpt_status"))
async def cmd_gpt_status(message: types.Message):
    status = "üü¢ –í–∫–ª—é—á–µ–Ω–∞" if get_gpt_status() else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω–∞"
    await message.answer(f"–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å YandexGPT: {status}")