# bot/keyboards/inline/admin_inline.py
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
# --- –ò–ó–ú–ï–ù–ï–ù–û: –∏–º–ø–æ—Ä—Ç RequestActionCallback ---
from .requests_inline import RequestActionCallback, HistoryNavigationCallback # –î–æ–±–∞–≤–ª—è–µ–º HistoryNavigationCallback
from db.models import Request, User, UserRole  # –î–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫

# --- CallbackData –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ê–ö–¢–ò–í–ù–´–ú –∑–∞—è–≤–∫–∞–º –∞–¥–º–∏–Ω–∞ ---
class AdminActiveNavCallback(CallbackData, prefix="adm_act"):
    action: str # 'page' –∏–ª–∏ 'sort'
    page: int
    sort_by: str # 'accepted_asc', 'created_asc', 'created_desc'

# --- CallbackData –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∞–¥–º–∏–Ω–æ–º ---
class AdminUserManageCallback(CallbackData, prefix="adm_usr"):
    action: str # 'list_page', 'view', 'set_role'
    page: int = 0 # –î–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞, –Ω—É–∂–Ω–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    user_id: int = 0 # ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_role: str = "" # –ù–æ–≤–∞—è —Ä–æ–ª—å ('admin', 'engineer', 'client')

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ ---
def get_admin_main_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            callback_data=AdminUserManageCallback(action="list_page", page=0).pack()
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üõ†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏",
            callback_data=AdminActiveNavCallback(action="page", page=0, sort_by='accepted_asc').pack()
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üìö –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö",
            callback_data=HistoryNavigationCallback(action="page", page=0, sort_by='date_desc').pack()
        )
    )
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def create_admin_users_list_keyboard(
    users: list[User],
    current_page: int,
    total_pages: int
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not users and current_page == 0:
        builder.button(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", callback_data="ignore_empty_list")
    else:
        for user in users:
            role_emoji = {
                UserRole.ADMIN: "üëë", UserRole.ENGINEER: "üõ†Ô∏è", UserRole.CLIENT: "üë§"
            }
            role_text = role_emoji.get(user.role, "‚ùì")
            name_parts = [user.first_name, user.last_name]
            display_name = " ".join(filter(None, name_parts))
            if not display_name: display_name = f"ID:{user.id}"
            user_details = f"(@{user.username})" if user.username else f"(ID:{user.id})"
            full_display = f"{role_text} {display_name} {user_details}"
            max_len = 50
            button_text = full_display[:max_len] + "..." if len(full_display) > max_len else full_display
            builder.button(
                text=button_text,
                callback_data=AdminUserManageCallback(action="view", user_id=user.id, page=current_page).pack()
            )
        builder.adjust(1)

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ü–ê–ì–ò–ù–ê–¶–ò–ò ---
    if total_pages > 0:
        pagination_row = []
        # 1. –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if current_page > 0:
            pagination_row.append(InlineKeyboardButton(
                text="< –ù–∞–∑–∞–¥",
                callback_data=AdminUserManageCallback(action="list_page", page=current_page - 1).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="ignore_nav_prev")) # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å

        # 2. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.append(InlineKeyboardButton(
            text=f"{current_page + 1}/{total_pages}",
            callback_data="ignore_page_indicator"
        ))

        # 3. –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if current_page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ >",
                callback_data=AdminUserManageCallback(action="list_page", page=current_page + 1).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="ignore_nav_next")) # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å

        builder.row(*pagination_row) # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –∏–∑ 3—Ö –∫–Ω–æ–ø–æ–∫
    elif total_pages == 0 and current_page == 0: # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç
        builder.row(InlineKeyboardButton(text="- / -", callback_data="ignore_page_indicator"))
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–º–µ–Ω–∞ —Ä–æ–ª–∏) ---
def create_admin_user_profile_keyboard(user: User, current_list_page: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    user_id = user.id
    callback_params = {"user_id": user_id, "page": current_list_page}

    if user.role != UserRole.ADMIN:
        builder.button(text="üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –ê–¥–º–∏–Ω–æ–º", callback_data=AdminUserManageCallback(
            action="set_role", new_role=UserRole.ADMIN.value, **callback_params).pack())
    if user.role != UserRole.ENGINEER:
        builder.button(text="üõ†Ô∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å –ò–Ω–∂–µ–Ω–µ—Ä–æ–º", callback_data=AdminUserManageCallback(
            action="set_role", new_role=UserRole.ENGINEER.value, **callback_params).pack())
    if user.role != UserRole.CLIENT:
        builder.button(text="üë§ –°–¥–µ–ª–∞—Ç—å –ö–ª–∏–µ–Ω—Ç–æ–º", callback_data=AdminUserManageCallback(
            action="set_role", new_role=UserRole.CLIENT.value, **callback_params).pack())

    builder.adjust(1)
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
        callback_data=AdminUserManageCallback(action="list_page", page=current_list_page).pack()
    ))
    return builder.as_markup()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ê–ö–¢–ò–í–ù–´–• –∑–∞—è–≤–æ–∫ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π) ---
def create_admin_active_requests_keyboard(
    requests: list[Request],
    current_page: int,
    total_pages: int,
    current_sort: str
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not requests and current_page == 0:
        builder.button(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", callback_data="ignore_empty_list")
    else:
        for req in requests:
            engineer_info = f" ({req.engineer.first_name})" if req.engineer and req.engineer.first_name else ""
            req_date = req.accepted_at or req.created_at
            date_str = req_date.strftime('%d.%m') if req_date else '??.??'
            button_text = f"#{req.id} ({date_str}{engineer_info}) {req.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
            max_len = 50
            button_text = button_text[:max_len] + "..." if len(button_text) > max_len else button_text
            builder.button(
                text=button_text,
                callback_data=RequestActionCallback(action="view_active", request_id=req.id).pack()
            )
        builder.adjust(1)

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ü–ê–ì–ò–ù–ê–¶–ò–ò ---
    if total_pages > 0:
        pagination_row = []
        # 1. –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if current_page > 0:
            pagination_row.append(InlineKeyboardButton(
                text="< –ù–∞–∑–∞–¥",
                callback_data=AdminActiveNavCallback(action="page", page=current_page - 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="ignore_nav_prev"))

        # 2. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.append(InlineKeyboardButton(
            text=f"{current_page + 1}/{total_pages}",
            callback_data="ignore_page_indicator"
        ))

        # 3. –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if current_page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ >",
                callback_data=AdminActiveNavCallback(action="page", page=current_page + 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="ignore_nav_next"))

        builder.row(*pagination_row)
    elif total_pages == 0 and current_page == 0:
        builder.row(InlineKeyboardButton(text="- / -", callback_data="ignore_page_indicator"))
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))
    return builder.as_markup()


# bot/keyboards/inline/requests_inline.py
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db.models import Request, UserRole

# --- CallbackData –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏ ---
class RequestActionCallback(CallbackData, prefix="req"):
    action: str # 'view', 'accept', 'complete', 'view_my', 'view_archive', 'view_active'
    request_id: int

# --- CallbackData –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ ---
class HistoryNavigationCallback(CallbackData, prefix="hist"):
    action: str # 'page', 'sort'
    page: int
    sort_by: str

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ù–û–í–´–• –∑–∞—è–≤–æ–∫---
def create_new_requests_keyboard(requests: list[Request]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not requests:
        builder.button(text="–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫", callback_data="ignore_empty_new")
    else:
        for req in requests:
            builder.button(
                text=f"#{req.id} - {req.description[:30]}...",
                callback_data=RequestActionCallback(action="view", request_id=req.id).pack()
            )
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –°–í–û–ò–• –∑–∞—è–≤–æ–∫ –í –†–ê–ë–û–¢–ï ---
def create_in_progress_requests_keyboard(requests: list[Request]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not requests:
        builder.button(text="–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ", callback_data="ignore_empty_inprogress")
    else:
        for req in requests:
            client_name = req.requester.first_name if req.requester and req.requester.first_name else f"ID:{req.requester_id}"
            button_text = f"#{req.id} - {client_name} - {req.description[:25]}..."
            builder.button(
                text=button_text,
                callback_data=RequestActionCallback(action="view_my", request_id=req.id).pack()
            )
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ù–û–í–û–ô –∑–∞—è–≤–∫–∏ (–∏–Ω–∂–µ–Ω–µ—Ä–æ–º) ---
def create_view_request_keyboard(request_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
        callback_data=RequestActionCallback(action="accept", request_id=request_id).pack()
    )
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –°–í–û–ï–ô –ó–ê–Ø–í–ö–ò –í –†–ê–ë–û–¢–ï (–∏–Ω–∂–µ–Ω–µ—Ä–æ–º) ---
def create_complete_request_keyboard(request_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å (–í—ã–ø–æ–ª–Ω–µ–Ω–æ)",
        callback_data=RequestActionCallback(action="complete", request_id=request_id).pack()
    )
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫ (–∏–Ω–∂–µ–Ω–µ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º) ---
def create_archive_requests_keyboard(
    requests: list[Request],
    current_page: int,
    total_pages: int,
    current_sort: str,
    user_role: UserRole | None = None
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    if not requests and current_page == 0:
        builder.button(text="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", callback_data="ignore_empty_history")
    else:
        for req in requests:
            date_info = req.archived_at or req.completed_at
            date_str = date_info.strftime('%d.%m') if date_info else '??.??'
            engineer_info = f" ({req.engineer.first_name})" if req.engineer and req.engineer.first_name else ""
            button_text = f"#{req.id} ({date_str}{engineer_info}) {req.description[:15]}..."
            max_len = 50
            button_text = button_text[:max_len] + "..." if len(button_text) > max_len else button_text
            builder.button(
                text=button_text,
                callback_data=RequestActionCallback(action="view_archive", request_id=req.id).pack()
            )
        builder.adjust(1)

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ü–ê–ì–ò–ù–ê–¶–ò–ò ---
    if total_pages > 0:
        pagination_row = []
        # 1. –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if current_page > 0:
            pagination_row.append(InlineKeyboardButton(
                text="< –ù–∞–∑–∞–¥",
                callback_data=HistoryNavigationCallback(action="page", page=current_page - 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="ignore_nav_prev")) # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å

        # 2. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.append(InlineKeyboardButton(
            text=f"{current_page + 1}/{total_pages}",
            callback_data="ignore_page_indicator"
        ))

        # 3. –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if current_page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ >",
                callback_data=HistoryNavigationCallback(action="page", page=current_page + 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="ignore_nav_next")) # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å

        builder.row(*pagination_row)
    elif total_pages == 0 and current_page == 0:
        builder.row(InlineKeyboardButton(text="- / -", callback_data="ignore_page_indicator"))
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---

    if user_role == UserRole.ADMIN:
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))

    return builder.as_markup()