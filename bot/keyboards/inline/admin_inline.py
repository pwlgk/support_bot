# bot/keyboards/inline/admin_inline.py
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db.models import Request,  User, UserRole  # –î–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫

# --- CallbackData –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ê–ö–¢–ò–í–ù–´–ú –∑–∞—è–≤–∫–∞–º –∞–¥–º–∏–Ω–∞ ---
class AdminActiveNavCallback(CallbackData, prefix="adm_act"):
    action: str # 'page'
    page: int
    sort_by: str # 'accepted_asc', 'created_asc', 'created_desc'

class AdminUserManageCallback(CallbackData, prefix="adm_usr"):
    action: str # 'list_page', 'view', 'set_role'
    page: int = 0 # –î–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞
    user_id: int = 0 # ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_role: str = "" # –ù–æ–≤–∞—è —Ä–æ–ª—å ('admin', 'engineer', 'client')

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ ---
def get_admin_main_menu() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π CallbackData –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        InlineKeyboardButton(
            text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
            callback_data=AdminUserManageCallback(action="list_page", page=0).pack() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 1—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞
        )
    )
    builder.row(
        InlineKeyboardButton(text="üõ†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_view_active") # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Å—Ç—Ä–æ–∫–æ–π
    )
    builder.row(
        InlineKeyboardButton(text="üìö –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö", callback_data="admin_view_history") # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Å—Ç—Ä–æ–∫–æ–π
    )
    return builder.as_markup()

def create_admin_users_list_keyboard(
    users: list[User],
    current_page: int,
    total_pages: int
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not users and current_page == 0:
        builder.button(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", callback_data="ignore_empty_list")
    else:
        for user in users:
            role_emoji = {
                UserRole.ADMIN: "üëë", UserRole.ENGINEER: "üõ†Ô∏è", UserRole.CLIENT: "üë§"
            }
            role_text = role_emoji.get(user.role, "‚ùì")
            user_display = f"{user.first_name or ''} {user.last_name or ''} (@{user.username})" if user.username else f"{user.first_name or ''} {user.last_name or ''} (ID:{user.id})"
            user_display = user_display.strip() or f"ID:{user.id}" # –ï—Å–ª–∏ –∏–º—è/—Ñ–∞–º–∏–ª–∏—è –ø—É—Å—Ç—ã–µ
            builder.button(
                text=f"{role_text} {user_display[:40]}...", # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                callback_data=AdminUserManageCallback(action="view", user_id=user.id).pack()
            )
        builder.adjust(1) # –ü–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Å—Ç—Ä–æ–∫–µ

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥—Ä—É–≥–∏–º —Å–ø–∏—Å–∫–∞–º)
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(InlineKeyboardButton(
            text="< –ù–∞–∑–∞–¥",
            callback_data=AdminUserManageCallback(action="list_page", page=current_page - 1).pack()
        ))
    else:
         pagination_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore_pagination_space"))

    if total_pages > 1:
         pagination_buttons.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="ignore_page_indicator"))
    elif total_pages == 1 and users:
         pagination_buttons.append(InlineKeyboardButton(text="1/1", callback_data="ignore_page_indicator"))
    else:
         pagination_buttons.append(InlineKeyboardButton(text="-", callback_data="ignore_page_indicator"))

    if current_page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ >",
            callback_data=AdminUserManageCallback(action="list_page", page=current_page + 1).pack()
        ))
    else:
        pagination_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore_pagination_space"))

    if total_pages > 0:
        builder.row(*pagination_buttons)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))

    return builder.as_markup()

# --- –ù–û–í–ê–Ø –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–º–µ–Ω–∞ —Ä–æ–ª–∏) ---
def create_admin_user_profile_keyboard(user: User) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    user_id = user.id
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
    # –ü–µ—Ä–µ–¥–∞–µ–º user_id –∏ –Ω–æ–≤—É—é —Ä–æ–ª—å –≤ callback_data
    if user.role != UserRole.ADMIN:
        builder.button(text="üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –ê–¥–º–∏–Ω–æ–º", callback_data=AdminUserManageCallback(
            action="set_role", user_id=user_id, new_role=UserRole.ADMIN.value).pack())
    if user.role != UserRole.ENGINEER:
        builder.button(text="üõ†Ô∏è –ù–∞–∑–Ω–∞—á–∏—Ç—å –ò–Ω–∂–µ–Ω–µ—Ä–æ–º", callback_data=AdminUserManageCallback(
            action="set_role", user_id=user_id, new_role=UserRole.ENGINEER.value).pack())
    if user.role != UserRole.CLIENT:
        builder.button(text="üë§ –°–¥–µ–ª–∞—Ç—å –ö–ª–∏–µ–Ω—Ç–æ–º", callback_data=AdminUserManageCallback(
            action="set_role", user_id=user_id, new_role=UserRole.CLIENT.value).pack())

    builder.adjust(1) # –ü–æ –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" (–Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞)
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∫–Ω–æ–ø–∫–∞ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –º–æ–∂–Ω–æ –µ–µ —É–±—Ä–∞—Ç—å/—Å–¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=AdminUserManageCallback(
        action="list_page", page=0).pack())) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ 1—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    return builder.as_markup()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ê–ö–¢–ò–í–ù–´–• –∑–∞—è–≤–æ–∫ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π) ---
def create_admin_active_requests_keyboard(
    requests: list[Request],
    current_page: int,
    total_pages: int,
    current_sort: str
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not requests and current_page == 0:
        builder.button(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫", callback_data="ignore_empty_list")
    else:
        for req in requests:
            engineer_name = req.engineer.first_name if req.engineer else "N/A"
            req_date = req.accepted_at or req.created_at # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            date_str = req_date.strftime('%y-%m-%d') if req_date else 'N/A'
            builder.button(
                text=f"#{req.id} ({date_str}) {engineer_name} - {req.description[:15]}...",
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ callback –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π, —á—Ç–æ –∏ –¥–ª—è –∞—Ä—Ö–∏–≤–∞/–∏–Ω–∂–µ–Ω–µ—Ä–∞
                callback_data=f"req:view_archive:{req.id}" # –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å action 'view_admin'
            )
        builder.adjust(1)

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏)
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(InlineKeyboardButton(
            text="< –ù–∞–∑–∞–¥",
            callback_data=AdminActiveNavCallback(action="page", page=current_page - 1, sort_by=current_sort).pack()
        ))
    else:
         pagination_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore_pagination_space"))

    if total_pages > 1:
         pagination_buttons.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="ignore_page_indicator"))
    elif total_pages == 1 and requests:
         pagination_buttons.append(InlineKeyboardButton(text="1/1", callback_data="ignore_page_indicator"))
    else:
         pagination_buttons.append(InlineKeyboardButton(text="-", callback_data="ignore_page_indicator"))

    if current_page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ >",
            callback_data=AdminActiveNavCallback(action="page", page=current_page + 1, sort_by=current_sort).pack()
        ))
    else:
        pagination_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore_pagination_space"))

    if total_pages > 0:
        builder.row(*pagination_buttons)

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))
    return builder.as_markup()