# bot/keyboards/inline/requests_inline.py
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db.models import Request, UserRole

# --- CallbackData –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏ ---
class RequestActionCallback(CallbackData, prefix="req"):
    action: str # 'view', 'accept', 'complete', 'view_my', 'view_archive'
    request_id: int


class HistoryNavigationCallback(CallbackData, prefix="hist"):
    action: str # 'page', 'sort' (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ 'page')
    page: int   # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (0-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
    sort_by: str # –ü–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ('date_desc', 'date_asc', 'id_asc', 'id_desc')
# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ù–û–í–´–• –∑–∞—è–≤–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def create_new_requests_keyboard(requests: list[Request]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for req in requests:
        builder.button(
            text=f"#{req.id} - {req.description[:30]}...",
            callback_data=RequestActionCallback(action="view", request_id=req.id)
        )
    builder.adjust(1)
    return builder.as_markup()

# --- –ù–û–í–ê–Ø: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –°–í–û–ò–• –∑–∞—è–≤–æ–∫ –í –†–ê–ë–û–¢–ï ---
def create_in_progress_requests_keyboard(requests: list[Request]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for req in requests:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º action="view_my", —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–∞–∑–ª–∏—á–∞—Ç—å –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø—Ä–æ—Å–º–æ—Ç—Ä
        builder.button(
            text=f"#{req.id} - {req.requester.first_name} - {req.description[:25]}...",
            callback_data=RequestActionCallback(action="view_my", request_id=req.id)
        )
    builder.adjust(1)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –∏–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ (–∏–Ω–∂–µ–Ω–µ—Ä–æ–º) ---
# –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å"
def create_view_request_keyboard(request_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
        callback_data=RequestActionCallback(action="accept", request_id=request_id)
    )
    # builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", ...)
    builder.adjust(1)
    return builder.as_markup()

def create_complete_request_keyboard(request_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å (–í—ã–ø–æ–ª–Ω–µ–Ω–æ)",
        callback_data=RequestActionCallback(action="complete", request_id=request_id)
    )
    # builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", ...)
    builder.adjust(1)
    return builder.as_markup()
def create_archive_requests_keyboard(
    requests: list[Request],
    current_page: int,
    total_pages: int,
    current_sort: str,
    user_role: UserRole | None = None # <-- –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –≠–¢–û–¢ –ü–ê–†–ê–ú–ï–¢–† –î–û–ë–ê–í–õ–ï–ù
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ —Å –∑–∞—è–≤–∫–∞–º–∏ (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not requests and current_page == 0:
        builder.button(text="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", callback_data="ignore_empty_history")
    else:
        for req in requests:
            date_info = req.archived_at or req.completed_at
            date_str = date_info.strftime('%y-%m-%d') if date_info else 'N/A'
            engineer_name = req.engineer.first_name if req.engineer else "N/A"
            builder.button(
                text=f"#{req.id} ({date_str}) {engineer_name} - {req.description[:15]}...",
                callback_data=RequestActionCallback(action="view_archive", request_id=req.id).pack()
            )
        builder.adjust(1)

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(InlineKeyboardButton(
            text="< –ù–∞–∑–∞–¥",
            callback_data=HistoryNavigationCallback(action="page", page=current_page - 1, sort_by=current_sort).pack()
        ))
    else:
         pagination_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore_pagination_space"))
    if total_pages > 1:
         pagination_buttons.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="ignore_page_indicator"))
    elif total_pages == 1 and requests:
         pagination_buttons.append(InlineKeyboardButton(text="1/1", callback_data="ignore_page_indicator"))
    else:
         pagination_buttons.append(InlineKeyboardButton(text="-", callback_data="ignore_page_indicator"))
    if current_page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ >",
            callback_data=HistoryNavigationCallback(action="page", page=current_page + 1, sort_by=current_sort).pack()
        ))
    else:
        pagination_buttons.append(InlineKeyboardButton(text=" ", callback_data="ignore_pagination_space"))
    if total_pages > 0:
        builder.row(*pagination_buttons)

    # –£—Å–ª–æ–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if user_role == UserRole.ADMIN:
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))

    return builder.as_markup()