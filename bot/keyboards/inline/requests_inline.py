# bot/keyboards/inline/requests_inline.py
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db.models import Request, UserRole

# --- CallbackData –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏ ---
class RequestActionCallback(CallbackData, prefix="req"):
    action: str 
    request_id: int

# --- CallbackData –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ò–°–¢–û–†–ò–ò –∑–∞—è–≤–æ–∫ (–¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–∞ –∏ –∞–¥–º–∏–Ω–∞) ---
class HistoryNavigationCallback(CallbackData, prefix="hist"):
    action: str 
    page: int
    sort_by: str

# --- CallbackData –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ê–ö–¢–ò–í–ù–´–ú –∑–∞—è–≤–∫–∞–º –ò–ù–ñ–ï–ù–ï–†–ê ---
class EngActiveNavCallback(CallbackData, prefix="eng_act"):
    action: str 
    page: int
    sort_by: str


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ù–û–í–´–• –∑–∞—è–≤–æ–∫  ---
def create_new_requests_keyboard(requests: list[Request]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not requests:
        builder.button(text="–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫", callback_data="ignore_empty_new")
    else:
        for req in requests:
            builder.button(
                text=f"#{req.id} - {req.description[:30]}...",
                callback_data=RequestActionCallback(action="view", request_id=req.id).pack()
            )
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –ò–ù–ñ–ï–ù–ï–†–ê  ---
def create_engineer_active_requests_keyboard(
    requests: list[Request],
    current_page: int,
    total_pages: int,
    current_sort: str
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not requests and current_page == 0:
        builder.button(text="–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ", callback_data="ignore_empty_inprogress")
    else:
        for req in requests:
            client_name = req.requester.first_name if req.requester and req.requester.first_name else f"ID:{req.requester_id}"
            accepted_date_str = req.accepted_at.strftime('%d.%m') if req.accepted_at else '??.??'
            desc_text = req.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            button_text = f"#{req.id} ({accepted_date_str}) {client_name} - {desc_text[:20]}..."
            max_len = 50
            button_text = button_text[:max_len] + "..." if len(button_text) > max_len else button_text
            builder.button(
                text=button_text,
                callback_data=RequestActionCallback(action="view_my", request_id=req.id).pack()
            )
        builder.adjust(1)
    if total_pages > 0:
        pagination_row = []
        if current_page > 0:
            pagination_row.append(InlineKeyboardButton(
                text="< –ù–∞–∑–∞–¥",
                callback_data=EngActiveNavCallback(action="page", page=current_page - 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text="‚Ä¢", callback_data="ignore_nav_prev"))
        pagination_row.append(InlineKeyboardButton(
            text=f"{current_page + 1}/{total_pages}",
            callback_data="ignore_page_indicator"
        ))
        if current_page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ >",
                callback_data=EngActiveNavCallback(action="page", page=current_page + 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text="‚Ä¢", callback_data="ignore_nav_next"))
        builder.row(*pagination_row)
    elif total_pages == 0 and current_page == 0:
        builder.row(InlineKeyboardButton(text="- / -", callback_data="ignore_page_indicator"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu_eng"))
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–æ–∫ ---
def create_view_request_keyboard(request_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
        callback_data=RequestActionCallback(action="accept", request_id=request_id).pack()
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–æ–≤—ã–º", callback_data="eng_view_new"))
    builder.adjust(1)
    return builder.as_markup()

def create_complete_request_keyboard(request_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å (–í—ã–ø–æ–ª–Ω–µ–Ω–æ)",
        callback_data=RequestActionCallback(action="complete", request_id=request_id).pack()
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu_eng"))
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ò–°–¢–û–†–ò–ò –∑–∞—è–≤–æ–∫ ---
def create_archive_requests_keyboard(
    requests: list[Request],
    current_page: int,
    total_pages: int,
    current_sort: str,
    user_role: UserRole | None = None
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    if not requests and current_page == 0:
        builder.button(text="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", callback_data="ignore_empty_history")
    else:
        for req in requests:
            date_info = req.archived_at or req.completed_at
            date_str = date_info.strftime('%d.%m') if date_info else '??.??'
            # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–∂–µ–Ω–µ—Ä–∞
            engineer_info = f" ({req.engineer.first_name})" if req.engineer and req.engineer.first_name else ""
            desc_text = req.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–∂–µ–Ω–µ—Ä–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            button_text = f"#{req.id} ({date_str}{engineer_info}) {desc_text[:15]}..."
            max_len = 50
            button_text = button_text[:max_len] + "..." if len(button_text) > max_len else button_text

            builder.button(
                text=button_text,
                # –≠—Ç–æ—Ç action –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ admin_panel.py
                callback_data=RequestActionCallback(action="view_archive", request_id=req.id).pack()
            )
        builder.adjust(1)

    if total_pages > 0:
        pagination_row = []
        # 1. –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if current_page > 0:
            pagination_row.append(InlineKeyboardButton(
                text="< –ù–∞–∑–∞–¥",
                callback_data=HistoryNavigationCallback(action="page", page=current_page - 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text="‚Ä¢", callback_data="ignore_nav_prev")) # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å

        # 2. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.append(InlineKeyboardButton(
            text=f"{current_page + 1}/{total_pages}",
            callback_data="ignore_page_indicator"
        ))

        # 3. –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if current_page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ >",
                callback_data=HistoryNavigationCallback(action="page", page=current_page + 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text="‚Ä¢", callback_data="ignore_nav_next")) # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å

        builder.row(*pagination_row)
    elif total_pages == 0 and current_page == 0:
        builder.row(InlineKeyboardButton(text="- / -", callback_data="ignore_page_indicator"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user_role == UserRole.ADMIN:
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))
    elif user_role == UserRole.ENGINEER:
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu_eng"))

    return builder.as_markup()
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db.models import Request, UserRole

# --- CallbackData –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏ ---
class RequestActionCallback(CallbackData, prefix="req"):
    action: str 
    request_id: int

# --- CallbackData –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ò–°–¢–û–†–ò–ò –∑–∞—è–≤–æ–∫ (–¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–∞ –∏ –∞–¥–º–∏–Ω–∞) ---
class HistoryNavigationCallback(CallbackData, prefix="hist"):
    action: str 
    page: int
    sort_by: str

class EngActiveNavCallback(CallbackData, prefix="eng_act"):
    action: str # 'page', 'sort'
    page: int
    sort_by: str # –ü–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'accepted_asc', 'created_desc')


def create_new_requests_keyboard(requests: list[Request]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not requests:
        builder.button(text="–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫", callback_data="ignore_empty_new")
    else:
        for req in requests:
            builder.button(
                text=f"#{req.id} - {req.description[:30]}...",
                callback_data=RequestActionCallback(action="view", request_id=req.id).pack()
            )
    builder.adjust(1)
    return builder.as_markup()

def create_engineer_active_requests_keyboard(
    requests: list[Request],
    current_page: int,
    total_pages: int,
    current_sort: str
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not requests and current_page == 0:
        builder.button(text="–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ", callback_data="ignore_empty_inprogress")
    else:
        for req in requests:
            client_name = req.requester.first_name if req.requester and req.requester.first_name else f"ID:{req.requester_id}"
            accepted_date_str = req.accepted_at.strftime('%d.%m') if req.accepted_at else '??.??'
            desc_text = req.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            button_text = f"#{req.id} ({accepted_date_str}) {client_name} - {desc_text[:20]}..."
            max_len = 50
            button_text = button_text[:max_len] + "..." if len(button_text) > max_len else button_text

            builder.button(
                text=button_text,
                callback_data=RequestActionCallback(action="view_my", request_id=req.id).pack()
            )
        builder.adjust(1)

    if total_pages > 0:
        pagination_row = []
        if current_page > 0:
            pagination_row.append(InlineKeyboardButton(
                text="< –ù–∞–∑–∞–¥",
                callback_data=EngActiveNavCallback(action="page", page=current_page - 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text="‚Ä¢", callback_data="ignore_nav_prev"))

        pagination_row.append(InlineKeyboardButton(
            text=f"{current_page + 1}/{total_pages}",
            callback_data="ignore_page_indicator"
        ))

        if current_page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ >",
                callback_data=EngActiveNavCallback(action="page", page=current_page + 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text="‚Ä¢", callback_data="ignore_nav_next"))

        builder.row(*pagination_row)
    elif total_pages == 0 and current_page == 0:
        builder.row(InlineKeyboardButton(text="- / -", callback_data="ignore_page_indicator"))

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu_eng")) # –ù—É–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    return builder.as_markup()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ù–û–í–û–ô –∑–∞—è–≤–∫–∏ (–∏–Ω–∂–µ–Ω–µ—Ä–æ–º) ---
def create_view_request_keyboard(request_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
        callback_data=RequestActionCallback(action="accept", request_id=request_id).pack()
    )
    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–æ–≤—ã–º", callback_data="eng_view_new"))
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –°–í–û–ï–ô –ó–ê–Ø–í–ö–ò –í –†–ê–ë–û–¢–ï (–∏–Ω–∂–µ–Ω–µ—Ä–æ–º) ---
def create_complete_request_keyboard(request_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å (–í—ã–ø–æ–ª–Ω–µ–Ω–æ)",
        callback_data=RequestActionCallback(action="complete", request_id=request_id).pack()
    )
    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–∂–Ω–µ–µ –∏–∑-–∑–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu_eng"))
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ò–°–¢–û–†–ò–ò –∑–∞—è–≤–æ–∫ (–∏–Ω–∂–µ–Ω–µ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º) ---
def create_archive_requests_keyboard(
    requests: list[Request],
    current_page: int,
    total_pages: int,
    current_sort: str,
    user_role: UserRole | None = None
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    if not requests and current_page == 0:
        builder.button(text="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", callback_data="ignore_empty_history")
    else:
        for req in requests:
            date_info = req.archived_at or req.completed_at
            date_str = date_info.strftime('%d.%m') if date_info else '??.??'
            # –î–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–∞ –µ–≥–æ –∏–º—è –Ω–µ —Ç–∞–∫ –≤–∞–∂–Ω–æ, –≤–∞–∂–Ω–µ–µ –∫–ª–∏–µ–Ω—Ç
            client_name = req.requester.first_name if req.requester and req.requester.first_name else f"ID:{req.requester_id}"
            desc_text = req.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            button_text = f"#{req.id} ({date_str}) {client_name} - {desc_text[:15]}..."
            max_len = 50
            button_text = button_text[:max_len] + "..." if len(button_text) > max_len else button_text

            builder.button(
                text=button_text,
                callback_data=RequestActionCallback(action="view_archive", request_id=req.id).pack()
            )
        builder.adjust(1)

    if total_pages > 0:
        pagination_row = []
        if current_page > 0:
            pagination_row.append(InlineKeyboardButton(
                text="< –ù–∞–∑–∞–¥",
                callback_data=HistoryNavigationCallback(action="page", page=current_page - 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="ignore_nav_prev"))
        pagination_row.append(InlineKeyboardButton(
            text=f"{current_page + 1}/{total_pages}",
            callback_data="ignore_page_indicator"
        ))
        if current_page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ >",
                callback_data=HistoryNavigationCallback(action="page", page=current_page + 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="ignore_nav_next"))
        builder.row(*pagination_row)
    elif total_pages == 0 and current_page == 0:
        builder.row(InlineKeyboardButton(text="- / -", callback_data="ignore_page_indicator"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user_role == UserRole.ADMIN:
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))
    elif user_role == UserRole.ENGINEER:
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu_eng"))

    return builder.as_markup()