# bot/keyboards/inline/requests_inline.py
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db.models import Request, UserRole

# --- CallbackData –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏ ---
class RequestActionCallback(CallbackData, prefix="req"):
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω 'view_active' –¥–ª—è –∞–¥–º–∏–Ω–∞ ---
    action: str # 'view', 'accept', 'complete', 'view_my', 'view_archive', 'view_active'
    request_id: int

# --- CallbackData –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ ---
class HistoryNavigationCallback(CallbackData, prefix="hist"):
    action: str # 'page', 'sort' (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ 'page')
    page: int   # –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (0-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
    sort_by: str # –ü–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ('date_desc', 'date_asc', 'id_asc', 'id_desc')

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ù–û–í–´–• –∑–∞—è–≤–æ–∫---
def create_new_requests_keyboard(requests: list[Request]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ---
    if not requests:
        builder.button(text="–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫", callback_data="ignore_empty_new")
    else:
        for req in requests:
            builder.button(
                text=f"#{req.id} - {req.description[:30]}...",
                # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω .pack() ---
                callback_data=RequestActionCallback(action="view", request_id=req.id).pack()
            )
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –°–í–û–ò–• –∑–∞—è–≤–æ–∫ –í –†–ê–ë–û–¢–ï ---
def create_in_progress_requests_keyboard(requests: list[Request]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ---
    if not requests:
        builder.button(text="–ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ", callback_data="ignore_empty_inprogress")
    else:
        for req in requests:
             # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
            client_name = req.requester.first_name if req.requester and req.requester.first_name else f"ID:{req.requester_id}"
            button_text = f"#{req.id} - {client_name} - {req.description[:25]}..."
            builder.button(
                text=button_text,
                # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω .pack() ---
                callback_data=RequestActionCallback(action="view_my", request_id=req.id).pack()
            )
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ù–û–í–û–ô –∑–∞—è–≤–∫–∏ (–∏–Ω–∂–µ–Ω–µ—Ä–æ–º) ---
def create_view_request_keyboard(request_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω .pack() ---
        callback_data=RequestActionCallback(action="accept", request_id=request_id).pack()
    )
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–æ–≤—ã–º", callback_data="back_to_new_requests")
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –°–í–û–ï–ô –ó–ê–Ø–í–ö–ò –í –†–ê–ë–û–¢–ï (–∏–Ω–∂–µ–Ω–µ—Ä–æ–º) ---
def create_complete_request_keyboard(request_id: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å (–í—ã–ø–æ–ª–Ω–µ–Ω–æ)",
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω .pack() ---
        callback_data=RequestActionCallback(action="complete", request_id=request_id).pack()
    )
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É "–≤ —Ä–∞–±–æ—Ç–µ"
    # builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_my_requests")
    builder.adjust(1)
    return builder.as_markup()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫ (–∏–Ω–∂–µ–Ω–µ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–æ–º) ---
def create_archive_requests_keyboard(
    requests: list[Request],
    current_page: int,
    total_pages: int,
    current_sort: str,
    user_role: UserRole | None = None
) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    if not requests and current_page == 0:
        builder.button(text="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞", callback_data="ignore_empty_history")
    else:
        for req in requests:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            date_info = req.archived_at or req.completed_at
            date_str = date_info.strftime('%d.%m') if date_info else '??.??' # –ö–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            engineer_info = f" ({req.engineer.first_name})" if req.engineer and req.engineer.first_name else ""

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            # --- –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ req.description ---
            desc_text = req.description or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            button_text = f"#{req.id} ({date_str}{engineer_info}) {desc_text[:15]}..."
            max_len = 50
            button_text = button_text[:max_len] + "..." if len(button_text) > max_len else button_text

            builder.button(
                text=button_text,
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pack(), –∫–∞–∫ –∏ –±—ã–ª–æ
                callback_data=RequestActionCallback(action="view_archive", request_id=req.id).pack()
            )
        builder.adjust(1)

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ü–ê–ì–ò–ù–ê–¶–ò–ò ---
    if total_pages > 0:
        pagination_row = []
        # 1. –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if current_page > 0:
            pagination_row.append(InlineKeyboardButton(
                text="< –ù–∞–∑–∞–¥",
                callback_data=HistoryNavigationCallback(action="page", page=current_page - 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="ignore_nav_prev")) # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å

        # 2. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pagination_row.append(InlineKeyboardButton(
            text=f"{current_page + 1}/{total_pages}",
            callback_data="ignore_page_indicator"
        ))

        # 3. –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if current_page < total_pages - 1:
            pagination_row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ >",
                callback_data=HistoryNavigationCallback(action="page", page=current_page + 1, sort_by=current_sort).pack()
            ))
        else:
            pagination_row.append(InlineKeyboardButton(text=" ", callback_data="ignore_nav_next")) # –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å

        builder.row(*pagination_row) # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –∏–∑ 3—Ö –∫–Ω–æ–ø–æ–∫
    elif total_pages == 0 and current_page == 0: # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç
        builder.row(InlineKeyboardButton(text="- / -", callback_data="ignore_page_indicator"))
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" –¥–ª—è –ê–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ä–æ–ª—å)
    if user_role == UserRole.ADMIN:
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back_to_main"))
    # –î–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –∑–¥–µ—Å—å,
    # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω –≤–µ—Ä–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    return builder.as_markup()